import { useEffect, useState } from 'react'
import './App.css'
import { setupCspViolationReporting } from './utils/security'
import { getEnv } from './utils/env'
import { 
    Box, 
    Container, 
    Heading, 
    Text, 
    VStack, 
    HStack,
    List,
    ListItem,
    ListIcon,
    useColorMode,
    IconButton
} from '@chakra-ui/react'
import Button from './components/atoms/Button'
import Input from './components/atoms/Input'

/**
 * „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆ„É´„Éº„Éà„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 * „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö„Å®Âü∫Êú¨ÁöÑ„Å™„É¨„Ç§„Ç¢„Ç¶„Éà„ÇíÊèê‰æõ
 */
function App() {
    // „Ç¢„Éó„É™Âêç„ÇíÁí∞Â¢ÉÂ§âÊï∞„Åã„ÇâÂèñÂæó
    const appName = getEnv('VITE_APP_NAME', '„Éò„É´„Éë„Éº„Ç∑„Çπ„ÉÜ„É†')
    const [inputValue, setInputValue] = useState('')
    const [showError, setShowError] = useState(false)
    const { colorMode, toggleColorMode } = useColorMode()

    // CSPÈÅïÂèç„É¨„Éù„Éº„Éà„ÅÆË®≠ÂÆö
    useEffect(() => {
        setupCspViolationReporting()
        
        // CSRF‰øùË≠∑„ÅÆ„Åü„ÇÅ„ÅÆ„É°„Çø„Çø„Ç∞„ÇíËøΩÂä†
        const csrfMeta = document.createElement('meta')
        csrfMeta.setAttribute('name', 'csrf-token')
        csrfMeta.setAttribute('content', crypto.randomUUID())
        document.head.appendChild(csrfMeta)
        
        return () => {
            // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÊôÇ„Å´„É°„Çø„Çø„Ç∞„ÇíÂâäÈô§
            document.head.removeChild(csrfMeta)
        }
    }, [])

    // ÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„ÅÆÊ§úË®º
    const validateInput = () => {
        setShowError(inputValue.length < 3)
    }

    return (
        <Container maxW="container.xl" py={8}>
            <VStack spacing={8} align="stretch">
                <Box as="header" py={4} display="flex" justifyContent="space-between" alignItems="center">
                    <Heading as="h1" size="xl">{appName}</Heading>
                    <IconButton
                        aria-label={`Switch to ${colorMode === 'light' ? 'dark' : 'light'} mode`}
                        icon={colorMode === 'light' ? <span>üåô</span> : <span>‚òÄÔ∏è</span>}
                        onClick={toggleColorMode}
                        variant="ghost"
                    />
                </Box>
                
                <Box as="main">
                    <VStack spacing={6} align="stretch">
                        <Box bg={colorMode === 'light' ? 'brand.50' : 'brand.900'} p={6} borderRadius="md">
                            <VStack spacing={4} align="stretch">
                                <Heading as="h2" size="lg">UI„É©„Ç§„Éñ„É©„É™Â∞éÂÖ•ÂÆå‰∫Ü</Heading>
                                <Text>Chakra UI„Çí‰ΩøÁî®„Åó„Åü„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥</Text>
                            </VStack>
                        </Box>
                        
                        <Box p={6} borderWidth="1px" borderRadius="md">
                            <VStack spacing={6} align="stretch">
                                <Heading as="h3" size="md">„Éú„Çø„É≥„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà</Heading>
                                
                                <HStack spacing={4}>
                                    <Button>„Éá„Éï„Ç©„É´„Éà</Button>
                                    <Button colorScheme="blue">ÈùíËâ≤</Button>
                                    <Button variant="outline">„Ç¢„Ç¶„Éà„É©„Ç§„É≥</Button>
                                    <Button isDisabled>ÁÑ°Âäπ</Button>
                                    <Button isLoading>Ë™≠„ÅøËæº„Åø‰∏≠</Button>
                                </HStack>
                            </VStack>
                        </Box>
                        
                        <Box p={6} borderWidth="1px" borderRadius="md">
                            <VStack spacing={6} align="stretch">
                                <Heading as="h3" size="md">„Éï„Ç©„Éº„É†„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà</Heading>
                                
                                <Input
                                    id="demo-input"
                                    label="„ÅäÂêçÂâç"
                                    placeholder="ÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                    helperText="3ÊñáÂ≠ó‰ª•‰∏äÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                    value={inputValue}
                                    onChange={(e) => setInputValue(e.target.value)}
                                    onBlur={validateInput}
                                    errorMessage={showError ? "3ÊñáÂ≠ó‰ª•‰∏äÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ" : undefined}
                                />
                                
                                <HStack>
                                    <Button onClick={validateInput}>Ê§úË®º</Button>
                                    <Button 
                                        variant="outline" 
                                        onClick={() => {
                                            setInputValue('')
                                            setShowError(false)
                                        }}
                                    >
                                        „ÇØ„É™„Ç¢
                                    </Button>
                                </HStack>
                            </VStack>
                        </Box>
                        
                        <Box p={6} borderWidth="1px" borderRadius="md">
                            <VStack spacing={4} align="stretch">
                                <Heading as="h3" size="md">ÂÆå‰∫Ü„Åó„ÅüË®≠ÂÆö</Heading>
                                
                                <List spacing={2}>
                                    <ListItem>
                                        <ListIcon as={() => <span>‚úÖ</span>} />
                                        Chakra UI„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„Å®Âü∫Êú¨Ë®≠ÂÆö
                                    </ListItem>
                                    <ListItem>
                                        <ListIcon as={() => <span>‚úÖ</span>} />
                                        „Ç´„Çπ„Çø„É†„ÉÜ„Éº„Éû„ÅÆ‰ΩúÊàê
                                    </ListItem>
                                    <ListItem>
                                        <ListIcon as={() => <span>‚úÖ</span>} />
                                        „Ç∞„É≠„Éº„Éê„É´„Çπ„Çø„Ç§„É´„ÅÆÈÅ©Áî®
                                    </ListItem>
                                    <ListItem>
                                        <ListIcon as={() => <span>‚úÖ</span>} />
                                        Âü∫Êú¨„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆÂÆüË£Ö
                                    </ListItem>
                                    <ListItem>
                                        <ListIcon as={() => <span>‚úÖ</span>} />
                                        „ÉÜ„Çπ„Éà„Ç≥„Éº„Éâ„ÅÆ‰ΩúÊàê
                                    </ListItem>
                                </List>
                            </VStack>
                        </Box>
                    </VStack>
                </Box>
                
                <Box as="footer" py={4} textAlign="center">
                    <Text>&copy; {new Date().getFullYear()} {appName}</Text>
                </Box>
            </VStack>
        </Container>
    )
}

export default App
